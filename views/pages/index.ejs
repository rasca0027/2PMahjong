<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- CSS framework -->
    <link rel="stylesheet" href="//fonts.googleapis.com/css?family=Roboto:300,300italic,700,700italic">
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.css">
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/milligram/1.3.0/milligram.css">

    <title>2P Mahjong!</title>
  </head>
  <body>

    <div class="container" id="app">
      <h1>Hello, world!</h1>

      <p style="color: red">{{ message }} </p>

      <div v-if="state === 0">
        <button type="button" class="button" v-on:click="newGame">
          New Game 
        </button>

        <div class="form-group">
          <label for="room-num">Room ID</label>
          <input type="text" class="form-control" id="room-num" aria-describedby="roomHelp" v-model="roomId">
        </div>
        <button type="button" class="button" v-on:click="joinGame">
          Join Game 
        </button>
      </div> <!-- join game -->

      <div v-if="state === 1">
        Waiting for another player to join...
      </div>

      <div v-if="state === 2"> 
        Game start!
        <p>Your hands: {{ hand }} </p>
        <span style="border: 1px solid black" v-for="h in hand">
          {{ h }}
        </span>
      </div>
    </div>

    <!-- development version, includes helpful console warnings -->
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script> 
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <script>
      var socket = io()
      var vue = new Vue({
        el: '#app',
        data: {
          message: 'Hello Vue!',
          state: 0,
          roomId: '',
          info: [],
          hand: ''
        },
        created: function() {
          socket.on('connect', () => {
            console.log("socket connect")
            this.message = "connect" + socket.id
          })
          socket.on('gameStart', (data) => {
            console.log('game start')
            this.state = 2
            this.hand = data
            this.executeMyTurn(true)
          })
          socket.on('joined', (data) => {
            this.info.push({
              username: data,
                type: 'joined'
            });
            setTimeout(() => {
              this.info = [];
            }, 5000);
          });
        },
        methods: {
          newGame: function() {
            // post to newgame endpoint 
            axios.post('/newgame', {
              userId: socket.id
            })
              .then((result) => {
                // if success, change state to 1
                console.log(result) 
                if (result.data.status === 'success') {
                  this.message = 'successfully created room ' + result.data.room
                  this.state = 1
                }
              })
             .catch(function (error) {
                console.log(error);
              })
          },
          joinGame: function() {
            axios.post('/join', {
              userId: socket.id,
              room: this.roomId
            })
              .then((result) => {
                if (result.data.status === 'no_such_room') {
                  this.message = 'No such room ID'
                } else {
                  this.message = 'Game start'
                  this.state = 2
                  this.hand = result.data.hand
                  // notify other player
                  let p1 = result.data.opponent
                  let seed = result.data.seed
                  socket.emit('gameStart', p1, seed)
                }
              })
          },
          executeMyTurn: function(firstRound, lastTile, cursor) {
            function getOccurrence(arr, value) {
              let count = 0;
              arr.forEach((v) => (v === value && count ++));
              return count;
            }
            function getChiSets(value) {
              let possibleSets = []
              if (value.includes('.')) {
                let n = parseInt(value.split('.')[0])
                let kind = value.split('.')[1]
                if (n <= 7) {
                  let a = (n + 1).toString() + '.' + kind
                  let b = (n + 2).toString() + '.' + kind
                  if (this.hand.includes(a) && this.hand.includes(b)) 
                    possibleSets.push([value, a, b])
                } 
                if (n >= 2 && n <= 8) {
                  let a = (n - 1).toString() + '.' + kind
                  let b = (n + 1).toString() + '.' + kind
                  if (this.hand.includes(a) && this.hand.includes(b)) 
                    possibleSets.push([a, value, b])
                }
                if (n >= 3) {
                  let a = (n - 2).toString() + '.' + kind
                  let b = (n - 1).toString() + '.' + kind
                  if (this.hand.includes(a) && this.hand.includes(b)) 
                    possibleSets.push([a, b, value])
                }
              } 
              return possibleSets
            }
            if (!firstRound) { 
              // kan?
              if (getOccurrence(this.hand, lastTile) === 3) {
                
              }
              // pon?
              if (getOccurrence(this.hand, lastTile) === 2) {
              }
              // chi?
              let possibleChiSets = getChiSets(lastTile)
              if (possibleChiSets.length > 0) {
              
              }
            }
            // draw tile
            let newTile = cards[cursor]
            // tsumo?
            // added open kan / closed kan?
            // tenpai?
            // if so, riichi?
            // discard
            // hide all options
            // end, call next player's turn
          }
        }
      })
    </script>
  </body>
</html>
