<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- CSS framework -->
    <link rel="stylesheet" href="//fonts.googleapis.com/css?family=Roboto:300,300italic,700,700italic">
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.css">
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/milligram/1.3.0/milligram.css">

    <title>2P Mahjong!</title>
  </head>
  <body>

    <div class="container" id="app">
      <h1>Hello, world!</h1>

      <p style="color: red">{{ message }} </p>

      <div v-if="state === 0">
        <button type="button" class="button" v-on:click="newGame">
          New Game 
        </button>

        <div class="form-group">
          <label for="room-num">Room ID</label>
          <input type="text" class="form-control" id="room-num" aria-describedby="roomHelp" v-model="roomId">
        </div>
        <button type="button" class="button" v-on:click="joinGame">
          Join Game 
        </button>
      </div> <!-- join game -->

      <div v-if="state === 1">
        Waiting for another player to join...
      </div>

      <div v-if="state === 2"> 
        Game start!
        <div>
          <p>Your hands: {{ hand }} </p>
          <span style="border: 1px solid black" v-for="(h, index) in hand" @click="select(index)">
            {{ h }}
          </span>
          <span style="border: 1px solid black; margin-left: 15px">
            {{ nextTile }}
          </span>
        </div>
        <div>
          <select name="chi" v-if="actions.chi">
            <option v-for="s in actions.chiOptions" v-bind:key="s" v-bind:value="s"></option>
          </select>
          <button v-if="actions.chi">吃</button>    
          <button v-if="actions.pon">碰</button>    
          <button v-if="actions.kan">槓</button>    
          <button v-if="actions.chi || actions.pon || actions.kan" @click="cancel">Do nothing</button>
        </div>
        <div>
          <button @click="discardTile">Discard</button>
          <button v-if="tenpai">Tenpai (Enter phase 2)</button>
          <button v-if="tenpai">Riichi (Enter phase 2)</button>
        </div>
      </div>
    </div>

    <!-- development version, includes helpful console warnings -->
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script> 
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <script>
      var socket = io()
      var vue = new Vue({
        el: '#app',
        data: {
          message: 'Hello Vue!',
          state: 0,
          roomId: '',
          selectedIndex: -1,
          info: [],
          cursor: 0,
          tiles: [],
          hand: '',
          nextTile: '',
          discard: [],
          tenpai: false,
          actions: { chi: false, pon: false, kan: false, chiOptions: [] }
        },
        created: function() {
          socket.on('connect', () => {
            console.log("socket connect")
            this.message = "connect" + socket.id
          })
          socket.on('gameStart', (data, cursor, allTiles) => {
            console.log('game start')
            this.state = 2
            this.hand = data
            this.cursor = parseInt(cursor)
            this.tiles = allTiles
            this.executeMyTurn(true, null)
          })
          socket.on('joined', (data) => {
            this.info.push({
              username: data,
                type: 'joined'
            });
            setTimeout(() => {
              this.info = [];
            }, 5000);
          });
        },
        methods: {
          newGame: function() {
            // post to newgame endpoint 
            axios.post('/newgame', {
              userId: socket.id
            })
              .then((result) => {
                if (result.data.status === 'success') {
                  this.message = 'successfully created room ' + result.data.room
                  this.state = 1
                }
              })
             .catch(function (error) {
                console.log(error);
              })
          },
          joinGame: function() {
            axios.post('/join', {
              userId: socket.id,
              room: this.roomId
            })
              .then((result) => {
                if (result.data.status === 'no_such_room') {
                  this.message = 'No such room ID'
                } else if (result.data.status === 'start') {
                  this.message = 'Game start'
                  this.state = 2
                  this.hand = result.data.hand
                  this.cursor = 26
                  this.tiles = result.data.allTiles
                  // notify other player
                  let p1 = result.data.opponent
                  let seed = result.data.seed
                  socket.emit('gameStart', p1, seed, 26)
                }
              })
          },
          executeMyTurn: function(firstRound, lastTile) {
            function getOccurrence(arr, value) {
              let count = 0;
              arr.forEach((v) => (v === value && count ++));
              return count;
            }
            function getChiSets(value) {
              let possibleSets = []
              if (value.includes('.')) {
                let n = parseInt(value.split('.')[0])
                let kind = value.split('.')[1]
                if (n <= 7) {
                  let a = (n + 1).toString() + '.' + kind
                  let b = (n + 2).toString() + '.' + kind
                  if (this.hand.includes(a) && this.hand.includes(b)) 
                    possibleSets.push([value, a, b])
                } 
                if (n >= 2 && n <= 8) {
                  let a = (n - 1).toString() + '.' + kind
                  let b = (n + 1).toString() + '.' + kind
                  if (this.hand.includes(a) && this.hand.includes(b)) 
                    possibleSets.push([a, value, b])
                }
                if (n >= 3) {
                  let a = (n - 2).toString() + '.' + kind
                  let b = (n - 1).toString() + '.' + kind
                  if (this.hand.includes(a) && this.hand.includes(b)) 
                    possibleSets.push([a, b, value])
                }
              } 
              return possibleSets
            }
            let doableActions = false
            if (!firstRound) { 
              // kan?
              if (getOccurrence(this.hand, lastTile) === 3) {
                this.actions.kan = true
                doableActions = true
              }
              // pon?
              if (getOccurrence(this.hand, lastTile) === 2) {
                this.actions.pon = true
                doableActions = true
              }
              // chi?
              let possibleChiSets = getChiSets(lastTile)
              if (possibleChiSets.length > 0) {
                this.actions.chi = true
                this.actions.chiOptions = possibleChiSets
                doableActions = true
              }
            }
            // if no doable actions, draw tile directly 
            if (!doableActions) this.drawTile()
          },
          drawTile() {
            function isTenpai() {
              // TODO
              return false
            }
            // draw tile
            this.nextTile = this.tiles[this.cursor]
            this.cursor += 1
            // tsumo?
            // added open kan / closed kan?
            // tenpai?
            if (isTenpai()) {
              this.tenpai = true
            }
          },
          cancel() {
            this.actions = { chi: false, pon: false, kan: false, chiOptions: [] }
            this.drawTile()
            this.selectedIndex = -1
          },
          select(i) {
            console.log('selected ' + i)
            this.selectedIndex = i
          },
          discardTile() {
            if (this.selectedIndex === -1) {
              alert('please select a tile')
              return
            }
            // discard tile
            this.discard.push(this.selectedIndex)
            this.hand.splice(this.selectedIndex, 1)
            this.selectedIndex = -1
            // hide all options
            this.actions = { chi: false, pon: false, kan: false, chiOptions: [] }
            this.tenpai = false
            // end, call next player's turn
            socket.emit('yourTurn', this.discard, this.cursor)
          }

        }
      })
    </script>
  </body>
</html>
